#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R                   &kp T                                                            &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_SHIFT A    &kp S         &kp D         &kp F                   &kp G                 &trans                    &kp MINUS        &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_CONTROL Z  &kp X         &kp C         &kp V                   &kp B                 &kp COLON                 &kp SEMICOLON    &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp TAB             &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_CONTROL GRAVE  &mt LEFT_SHIFT SPACE  &lt_to_layer_0 4 DEL      &lt 2 BACKSPACE  &lt 1 ENTER                             &lt 5 ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F7            &kp F9            &kp F2            &kp LA(F4)        &kp LC(F5)                            &kp LC(C)           &kp HOME        &kp UP_ARROW    &kp END    &kp LC(V)
&kp LEFT_CONTROL  &kp F10           &kp F11           &kp LG(V)         &kp LG(D)         &trans      &trans  &kp LC(X)           &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp LC(S)
&kp LEFT_SHIFT    &kp LG(NUMBER_4)  &kp LG(NUMBER_3)  &kp LG(NUMBER_2)  &kp LG(NUMBER_1)  &trans      &trans  &kp LA(LEFT_ARROW)  &kp LA(RIGHT)   &kp LC(Z)       &kp LC(Y)  &trans
&trans            &trans            &trans            &trans            &trans            &trans      &trans  &trans                                                         &kp LS(LG(S))
            >;
        };

        NUM {
            bindings = <
&kp LS(NUMBER_4)  &kp DOUBLE_QUOTES  &kp LS(NUMBER_8)       &kp LS(NUMBER_9)   &kp RS(LS(SEMI))                      &kp LS(SLASH)  &kp LS(NUMBER_1)  &kp TILDE    &kp LS(NUMBER_4)  &kp LS(NUMBER_5)
&trans            &kp LS(NUMBER_3)   &kp RIGHT_BRACKET      &kp BACKSLASH      &kp LEFT_BRACKET  &trans      &trans  &kp SQT        &kp AMPS          &kp AT_SIGN  &kp SEMI          &kp UNDER
&trans            &trans             &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)  &kp MINUS         &trans      &trans  &kp UNDER      &kp AMPS          &kp PIPE     &kp GRAVE         &kp INT_YEN
&trans            &trans             &trans                 &trans             &trans            &trans      &trans  &trans                                                          &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
